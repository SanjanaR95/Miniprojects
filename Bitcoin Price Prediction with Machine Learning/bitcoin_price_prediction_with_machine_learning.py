# -*- coding: utf-8 -*-
"""Bitcoin Price Prediction with Machine Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EgyhsO6LwwWtG6T1OLPSymCmReQgvMix
"""

import numpy as np
import pandas as pd

# Upload bitcoin.csv into the current directory (Colab)
from google.colab import files
import os

print("Upload bitcoin.csv")
uploaded = files.upload()  # choose your local CSV

# If you uploaded with a different name, rename it to bitcoin.csv
if "bitcoin.csv" not in uploaded:
    for k in uploaded.keys():
        if k.lower().endswith(".csv"):
            os.rename(k, "bitcoin.csv")
            print(f"Renamed {k} -> bitcoin.csv")
            break

print("Ready: bitcoin.csv uploaded.")

df = pd.read_csv("bitcoin.csv")
df.head()

# Compat shim: allow legacy df.drop(['col'], 1, inplace=True) syntax on pandas>=2
import pandas as pd

if not hasattr(pd.DataFrame, "_drop_legacy_impl"):
    pd.DataFrame._drop_legacy_impl = pd.DataFrame.drop

    def _drop_shim(self, *args, **kwargs):
        # Handle calls like: df.drop(['Date'], 1, inplace=True)
        if len(args) >= 2 and 'axis' not in kwargs:
            labels, axis = args[0], args[1]
            return self._drop_legacy_impl(labels=labels, axis=axis, *args[2:], **kwargs)
        # Handle calls like: df.drop(['Date'], inplace=True)
        if len(args) >= 1 and 'labels' not in kwargs and 'index' not in kwargs and 'columns' not in kwargs:
            return self._drop_legacy_impl(labels=args[0], **kwargs)
        # Otherwise pass through
        return self._drop_legacy_impl(*args, **kwargs)

    pd.DataFrame.drop = _drop_shim

print("âœ… Legacy df.drop(['col'], 1, inplace=True) syntax enabled.")

df.drop(['Date'],1,inplace=True)

predictionDays = 30
# Create another column shifted 'n'  units up
df['Prediction'] = df[['Price']].shift(-predictionDays)
# show the first 5 rows
df.head()

df.tail()

# Create the independent dada set
# Here we will convert the data frame into a numpy array and drp the prediction column
x = np.array(df.drop(['Prediction'],1))
# Remove the last 'n' rows where 'n' is the predictionDays
x = x[:len(df)-predictionDays]
print(x)

# Create the dependent data set
# convert the data frame into a numpy array
y = np.array(df['Prediction'])
# Get all the values except last 'n' rows
y = y[:-predictionDays]
print(y)

# Split the data into 80% training and 20% testing
from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x,y, test_size = 0.2)
# set the predictionDays array equal to last 30 rows from the original data set
predictionDays_array = np.array(df.drop(['Prediction'],1))[-predictionDays:]
print(predictionDays_array)

from sklearn.svm import SVR
# Create and Train the Support Vector Machine (Regression) using radial basis function
svr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.00001)
svr_rbf.fit(xtrain, ytrain)

#Output
SVR(C=1000.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma=1e-05,
    kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)

"""Test the model"""

svr_rbf_confidence = svr_rbf.score(xtest,ytest)
print('SVR_RBF accuracy :',svr_rbf_confidence)

# print the predicted values
svm_prediction = svr_rbf.predict(xtest)
print(svm_prediction)
print()
print(ytest)

# Print the model predictions for the next 30 days
svm_prediction = svr_rbf.predict(predictionDays_array)
print(svm_prediction)
print()
#Print the actual price for bitcoin for last 30 days
print(df.tail(predictionDays))