# -*- coding: utf-8 -*-
"""Fake Currency Detection with Machine Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e3g4e4EocCdHYYglW-sIHVoRFiv9V-V-
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix

# Upload and prepare: data_banknote_authentication.txt
from google.colab import files
import os, re

print("Upload the dataset file (any name is fine).")
uploaded = files.upload()  # choose your local file

# If you uploaded with a different name/extension, rename to the expected filename:
for fname in uploaded.keys():
    if fname != "data_banknote_authentication.txt":
        os.rename(fname, "data_banknote_authentication.txt")
        print(f"Renamed {fname} -> data_banknote_authentication.txt")

print("Ready: data_banknote_authentication.txt is in the working directory.")

data = pd.read_csv('data_banknote_authentication.txt', header=None)
data.columns = ['var', 'skew', 'curt', 'entr', 'auth']
print(data.head())

print(data.info)

sns.pairplot(data, hue='auth')
plt.show()

plt.figure(figsize=(8,6))
plt.title('Distribution of Target', size=18)
sns.countplot(x=data['auth'])
target_count = data.auth.value_counts()
plt.text(-0.04, 10 + target_count[0], str(target_count[0]), fontsize=14)
plt.text(0.96, 10 + target_count[1], str(target_count[1]), fontsize=14)
plt.ylim(0, max(target_count) + 100)
plt.show()

nb_to_delete = target_count[0] - target_count[1]
data = data.sample(frac=1, random_state=42).sort_values(by='auth')
data = data[nb_to_delete:]
print(data['auth'].value_counts())

x = data.loc[:, data.columns != 'auth']
y = data.loc[:, data.columns == 'auth']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

scalar = StandardScaler()
scalar.fit(x_train)
x_train = scalar.transform(x_train)
x_test = scalar.transform(x_test)

clf = LogisticRegression(solver='lbfgs', random_state=42, multi_class='auto')
clf.fit(x_train, y_train.values.ravel())

y_pred = np.array(clf.predict(x_test))
conf_mat = pd.DataFrame(confusion_matrix(y_test, y_pred),
                        columns=["Pred.Negative", "Pred.Positive"],
                        index=['Act.Negative', "Act.Positive"])
tn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()
accuracy = round((tn+tp)/(tn+fp+fn+tp), 4)
print(conf_mat)
print(f'\n Accuracy = {round(100*accuracy, 2)}%')

new_banknote = np.array([4.5, -8.1, 2.4, 1.4], ndmin=2)
new_banknote = scalar.transform(new_banknote)
print(f'Prediction:  Class{clf.predict(new_banknote)[0]}')
print(f'Probability [0/1]:  {clf.predict_proba(new_banknote)[0]}')