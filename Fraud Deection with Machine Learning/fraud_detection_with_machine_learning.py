# -*- coding: utf-8 -*-
"""Fraud Detection with Machine Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O-dlHJbgcOshv6IJAAYyY_l_c27oM2Kg
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix

from google.colab import files
uploaded = files.upload()
df = pd.read_csv('payment_fraud.csv')
df.head()

# Split dataset up into train and test sets
X_train, X_test, y_train, y_test = train_test_split(
    df.drop('label', axis=1), df['label'],
    test_size=0.33, random_state=17)

# Make LogisticRegression handle string/categorical columns without changing your code
import numpy as np
from sklearn.compose import ColumnTransformer, make_column_selector as selector
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression as _SkLogisticRegression

# Build a drop-in factory named LogisticRegression
def LogisticRegression(*args, **kwargs):
    # Handle scikit-learn version differences for OneHotEncoder
    try:
        ohe = OneHotEncoder(handle_unknown='ignore', sparse_output=False)
    except TypeError:  # older versions use 'sparse'
        ohe = OneHotEncoder(handle_unknown='ignore', sparse=False)

    preproc = ColumnTransformer(
        transformers=[
            ('num', StandardScaler(), selector(dtype_include=np.number)),
            ('cat', ohe,                 selector(dtype_include=object)),
        ],
        remainder='drop'
    )

    return Pipeline(steps=[
        ('preprocess', preproc),
        ('clf', _SkLogisticRegression(*args, **kwargs))
    ])

print("âœ… LogisticRegression shim ready: categorical/text features will be one-hot encoded automatically.")

clf = LogisticRegression().fit(X_train, y_train)

# Make predictions on test set
y_pred = clf.predict(X_test)
from sklearn.metrics import accuracy_score
print(accuracy_score(y_pred, y_test))

# Compare test set predictions with ground truth labels
print(confusion_matrix(y_test, y_pred))